#include "step_select.h"
#include "dac_thread.h"

#if(STEP_SELECT>0)
#define TRNG_NUMBERS_TO_READ    1
uint32_t g_trng_result;             /* storage for the trng */
#endif

/* DAC Thread entry function */
void dac_thread_entry(void)
{
    /* TODO: add your own code here */
#if(STEP_SELECT>0)
    ssp_err_t ssp_err;              /* Error code checking */
#endif

#if(STEP_SELECT==1)
    /*
     * Open GPT0 - Used to set the semaphore in the g_gpt0 callback function
     */
    ssp_err = g_gpt0.p_api->open(g_gpt0.p_ctrl, g_gpt0.p_cfg);
    if(SSP_SUCCESS != ssp_err)
    {
        __BKPT(0);   /* If open is unsuccessful, hit breakpoint */
    }
#endif

#if(STEP_SELECT>0)
    /*
     * Open DAC - Output value is a scaled value generated by the TRNG
     */
    ssp_err = g_dac0.p_api->open(g_dac0.p_ctrl, g_dac0.p_cfg);
    if(SSP_SUCCESS != ssp_err)
    {
        __BKPT(0);   /* If open is unsuccessful, hit breakpoint */
    }

    /*
     * Open the SCE - Required prior to opening the TRNG
     */
    ssp_err = g_sce.p_api->open(g_sce.p_ctrl, g_sce.p_cfg);
    if(SSP_SUCCESS != ssp_err)
    {
        __BKPT(0);   /* If open is unsuccessful, hit breakpoint */
    }

    /*
     * Open the TRNG - Used to generate a random number for the DAC to output
     */
    ssp_err = g_sce_trng.p_api->open(g_sce_trng.p_ctrl, g_sce_trng.p_cfg);
    if(SSP_SUCCESS != ssp_err)
    {
        __BKPT(0);   /* If open is unsuccessful, hit breakpoint */
    }
#endif

#if(STEP_SELECT==1)
    /* Start the GPT0 running.  This will set a software flag once a second.
     * When this flag is set, a random number will be read, scaled and set
     * as the DAC output value
     */
    ssp_err = g_gpt0.p_api->start(g_gpt0.p_ctrl);
    if(SSP_SUCCESS != ssp_err)
    {
        __BKPT(0);   /* If start is unsuccessful, hit breakpoint */
    }
#endif


    while(1)
    {
        /* Wait for the g_dac_timer_semaphore to be set, by trying to "get" it
         * The semaphore will be put in the g_gpt0 callback function that will be called
         * every second
         */
#if (STEP_SELECT == 1)
        /*** ENTER API CALL HERE TO GET THE SEMAPHORE, WAITING FOREVER ***/
        tx_semaphore_get(&g_dac_timer_semaphore);
#endif


#if(STEP_SELECT>1)
        /*** ENTER API CALL HERE SUSPEND THE THREAD FOR 1s (100 RTOS TICKS) ***/

#endif
        /* Read a random number from the TRNG */
        ssp_err = g_sce_trng.p_api->read(g_sce_trng.p_ctrl, &g_trng_result, TRNG_NUMBERS_TO_READ);
        if(SSP_SUCCESS != ssp_err)
        {
            __BKPT(0);
        }

        /* Scale the 32 bit number for the 12-bit DAC */
        g_trng_result = g_trng_result/0x100000;

        /* Write the value to the DAC */
        ssp_err = g_dac0.p_api->write(g_dac0.p_ctrl, (dac_size_t)g_trng_result);
        if(SSP_SUCCESS != ssp_err)
        {
            __BKPT(0);
        }
    }
}


#if (STEP_SELECT == 1)
void cb_gpt0(timer_callback_args_t * p_args)
{
    SSP_PARAMETER_NOT_USED(p_args);

    /*** ENTER API HERE TO PUT THE DAC TIMER SEMAPHORE ***/
    tx_semaphore_put(&g_dac_timer_semaphore);

}
#endif
